//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/Input_System.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input_System: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input_System()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input_System"",
    ""maps"": [
        {
            ""name"": ""Milk_Action_Map"",
            ""id"": ""a5bfd62d-ab87-41ba-9910-312f7fa2522c"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""f2be44b7-c403-437d-9bf4-bf2805ac74e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""901bbe67-58b2-4402-8e70-f62a5557a409"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drag"",
                    ""type"": ""Button"",
                    ""id"": ""4c95376a-1e57-4959-87b3-7c913219a21e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""e7dabb2b-6684-40dc-bf45-f92e71354f31"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c2710493-4dfe-418f-8d00-e69da07cfeb3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b22aa61-8178-4047-a105-3bf1439dc302"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ce7a79b-a65d-45c5-82b5-feeb6400b723"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc99d8af-f92a-460e-be25-20c692ea5d30"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Milk_Action_Map
        m_Milk_Action_Map = asset.FindActionMap("Milk_Action_Map", throwIfNotFound: true);
        m_Milk_Action_Map_Click = m_Milk_Action_Map.FindAction("Click", throwIfNotFound: true);
        m_Milk_Action_Map_Interact = m_Milk_Action_Map.FindAction("Interact", throwIfNotFound: true);
        m_Milk_Action_Map_Drag = m_Milk_Action_Map.FindAction("Drag", throwIfNotFound: true);
        m_Milk_Action_Map_Menu = m_Milk_Action_Map.FindAction("Menu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Milk_Action_Map
    private readonly InputActionMap m_Milk_Action_Map;
    private List<IMilk_Action_MapActions> m_Milk_Action_MapActionsCallbackInterfaces = new List<IMilk_Action_MapActions>();
    private readonly InputAction m_Milk_Action_Map_Click;
    private readonly InputAction m_Milk_Action_Map_Interact;
    private readonly InputAction m_Milk_Action_Map_Drag;
    private readonly InputAction m_Milk_Action_Map_Menu;
    public struct Milk_Action_MapActions
    {
        private @Input_System m_Wrapper;
        public Milk_Action_MapActions(@Input_System wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_Milk_Action_Map_Click;
        public InputAction @Interact => m_Wrapper.m_Milk_Action_Map_Interact;
        public InputAction @Drag => m_Wrapper.m_Milk_Action_Map_Drag;
        public InputAction @Menu => m_Wrapper.m_Milk_Action_Map_Menu;
        public InputActionMap Get() { return m_Wrapper.m_Milk_Action_Map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Milk_Action_MapActions set) { return set.Get(); }
        public void AddCallbacks(IMilk_Action_MapActions instance)
        {
            if (instance == null || m_Wrapper.m_Milk_Action_MapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Milk_Action_MapActionsCallbackInterfaces.Add(instance);
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Drag.started += instance.OnDrag;
            @Drag.performed += instance.OnDrag;
            @Drag.canceled += instance.OnDrag;
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
        }

        private void UnregisterCallbacks(IMilk_Action_MapActions instance)
        {
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Drag.started -= instance.OnDrag;
            @Drag.performed -= instance.OnDrag;
            @Drag.canceled -= instance.OnDrag;
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
        }

        public void RemoveCallbacks(IMilk_Action_MapActions instance)
        {
            if (m_Wrapper.m_Milk_Action_MapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMilk_Action_MapActions instance)
        {
            foreach (var item in m_Wrapper.m_Milk_Action_MapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Milk_Action_MapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Milk_Action_MapActions @Milk_Action_Map => new Milk_Action_MapActions(this);
    public interface IMilk_Action_MapActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnDrag(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
    }
}
